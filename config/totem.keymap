//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define Base        0
#define Num         1
#define SymL        2
#define SymR        3
#define Nav         4
#define Fun         5
#define SAI         6

&sk {
    quick-release;
    lazy;
};

&lt {
    quick-tap-ms = <175>;
    tapping-term-ms = <200>;
    flavor = "balanced";
};

&mt {
    hold-while-undecided;
    tapping-term-ms = <170>;
    flavor = "tap-preferred";
    quick-tap-ms = <100>;
};

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 15 26 27 16 6 7 17 28 8 18 29 9 19 30 31 35 36 37 32 33 34>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 21 22 23 24 25 32 33 20 34 35 36 37>;
        };

        ShiftCaps: ShiftCaps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTCAPS";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_layer>;

            tapping-term-ms = <240>;
        };

        hml_und: hml_und {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_UND";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 15 26 27 16 6 7 17 28 8 18 29 9 19 30 31 35 36 37 32 33 34>;
            hold-while-undecided;
        };

        slayer: slayer {
            compatible = "zmk,behavior-tap-dance";
            label = "SLAYER";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 7>, <&to 8>;

            tapping-term-ms = <240>;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        spacenum: spacenum {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1 &kp SPACE>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 1 &kp SPACE>;

            label = "SPACENUM";
        };

        caps_layer: caps_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&tog 9 &kp CAPSLOCK>,
                <&macro_release>,
                <&tog 9 &kp CAPSLOCK>;

            label = "CAPS_LAYER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
         &kp Q            &kp W            &kp E                    &kp R                  &kp T        &kp Y         &kp U              &kp I                &kp O            &kp P
         &hml LEFT_GUI A  &hml LEFT_ALT S  &hml_und LEFT_CONTROL D  &hml_und LEFT_SHIFT F  &kp G        &kp H         &hmr LEFT_SHIFT J  &hmr LEFT_CONTROL K  &hmr LEFT_ALT L  &hmr LEFT_GUI SINGLE_QUOTE
&slayer  &kp Z            &kp X            &kp C                    &kp V                  &kp B        &kp N         &kp M              &kp COMMA            &kp PERIOD       &kp MINUS                   &ShiftCaps
                                           &lt 6 ESCAPE             &lt 1 SPACE            &lt 3 TAB    &lt 2 RETURN  &lt 4 BACKSPACE    &lt 6 DELETE
            >;
        };

        Num {
            bindings = <
       &kp HOME        &kp PRINTSCREEN    &kp C_MUTE        &kp END          &none         &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp SLASH
       &kp LC(Z)       &kp LC(X)          &kp LC(C)         &kp LC(V)        &kp LC(Y)     &kp PLUS      &kp N4  &kp N5  &kp N6  &kp DOT
&none  &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE  &kp C_VOLUME_UP  &kp C_NEXT    &kp CARET     &kp N1  &kp N2  &kp N3  &kp MINUS  &ShiftCaps
                                          &none             &none            &none         &kp EQUAL     &kp N0  &none
            >;

            label = "Num";
        };

        SymL {
            bindings = <
       &kp RA(NUMBER_1)  &kp PERCENT  &kp AMPERSAND  &kp RA(COLON)  &kp TILDE    &none  &none      &none      &none         &none
       &kp EXCLAMATION   &kp AT       &kp HASH       &kp DOLLAR     &kp GRAVE    &none  &kp LSHFT  &kp LCTRL  &kp LEFT_ALT  &kp LGUI
&none  &none             &none        &none          &none          &none        &none  &none      &none      &none         &none     &none
                                      &none          &none          &none        &none  &none      &none
            >;

            label = "SymL";
        };

        SymR {
            bindings = <
       &none     &none         &none      &none      &none    &kp BACKSLASH  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RA(LC(SLASH))
       &kp LGUI  &kp LEFT_ALT  &kp LCTRL  &kp LSHFT  &none    &kp PIPE       &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp QUESTION
&none  &none     &none         &none      &none      &none    &kp RA(N)      &none                  &kp SEMICOLON      &kp COLON        &kp UNDER          &none
                               &none      &none      &none    &none          &none                  &none
            >;

            label = "SymR";
        };

        Nav {
            bindings = <
       &none     &none     &none      &none      &none    &kp INSERT      &kp HOME           &kp PAGE_DOWN     &kp PAGE_UP      &kp END
       &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &tog 8          &kp LEFT_ARROW     &kp DOWN          &kp UP_ARROW     &kp RIGHT_ARROW
&none  &none     &none     &none      &none      &none    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE  &kp C_VOLUME_UP  &kp C_NEXT       &none
                           &none      &none      &none    &none           &none              &none
            >;

            label = "Nav";
        };

        NavLock {
            bindings = <
       &none     &none     &none      &none      &none    &kp INS     &kp HOME           &kp PAGE_DOWN     &kp PAGE_UP      &kp END
       &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &tog 8      &kp LEFT_ARROW     &kp DOWN_ARROW    &kp UP_ARROW     &kp RIGHT_ARROW
&none  &none     &none     &none      &none      &none    &kp C_NEXT  &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE  &kp C_VOLUME_UP  &kp C_NEXT       &tog 8
                           &none      &none      &none    &none       &none              &none
            >;

            label = "NavLock";
        };

        Fun {
            bindings = <
       &none     &none     &none      &none      &none    &none  &kp F7  &kp F8  &kp F9  &kp F12
       &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &none  &kp F4  &kp F5  &kp F6  &kp F11
&none  &none     &none     &none      &none      &none    &none  &kp F1  &kp F2  &kp F3  &kp F10  &none
                           &none      &none      &none    &none  &none   &none
            >;

            label = "Fun";
        };

        SAI {
            bindings = <
        &trans  &trans          &trans              &trans            &trans           &trans  &trans          &trans  &trans  &trans
        &trans  &kp S           &kp D               &kp F             &trans           &trans  &trans          &trans  &trans  &trans
&tog 7  &trans  &mt LEFT_ALT X  &mt LEFT_CONTROL C  &mt LEFT_SHIFT V  &trans           &trans  &trans          &trans  &trans  &trans  &none
                                &trans              &spacenum         &kp LC(SPACE)    &trans  &studio_unlock  &trans
            >;

            label = "SAI";
        };

        wasd {
            bindings = <
        &kp TAB     &kp Q  &none  &kp E      &kp R        &kp N1  &kp N2    &kp N3        &kp N4     &kp N5
        &kp LSHFT   &kp A  &kp W  &kp D      &kp F        &none   &kp LEFT  &kp UP_ARROW  &kp RIGHT  &none
&tog 8  &kp ESCAPE  &kp Z  &kp S  &kp C      &kp V        &none   &none     &kp DOWN      &none      &none   &none
                           &kp X  &kp SPACE  &kp LCTRL    &none   &none     &none
            >;

            label = "wasd";
        };

        Caps {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &caps_layer
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "Caps";
        };
    };
};
